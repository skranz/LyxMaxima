setwd("C:/research/rumors/")
library(LyxMaxima)
go()
load.lyma("lyma.R")
load.lyma("lyma.R")
source('C:/libraries/LyxMaxima/LyxMaxima/R/LyxMaximaGUI.R')
setwd("C:/libraries/LyxMaxima/LyxMaxima/R")
source("LyxMaxima.R")
source("LyxMaximaConnect.R")
source("LyxMaximaUtils.R")
source("LyxMaximaGUI.R")
source("LyxMaximaConvert.R")
setwd("C:/libraries/LyxMaxima")
setwd("C:/research/rumors/")
go()
restore.point
load.lyma("lyma.R")
restore.point("convert.math")
str
res = list()
# Merge all lines together to one string
str = str.trim(merge.lines(str))
if (do.subst) {
str = do.subst(str,lyma)
}
str
if (str=="") {
warning("convert.math called with empty string")
return(str)
}
# Remove trash
str = str.replace(str,"&","") # Delimeters for equarray
str = str.replace(str,"\\\\","")
str = str.replace(str,"\\left","")
str = str.replace(str,"\\right","")
#str = str.replace(str," ","")
str = str.replace(str,"\\[","")
str = str.replace(str,"\\]","")
str = str.replace(str,"$","")
# Find fractions \frac{numerator}{denominator}
str
source('C:/libraries/stringtools/stringtools/R/stringtools.R')
source.with.encoding('C:/libraries/LyxMaxima/LyxMaxima/R/LyxMaximaConvert.R', encoding='UTF-8')
str = str.replace.by.blocks(str,"\\frac{_SUB_}{_SUB_}","(_SUB1_)/(_SUB2_)",
block.start = "{", block.end = "}")
str
str = "-(\\sigma_{m}-\\beta\\sigma_{b})/(\\beta-1)=\\frac{\\sigma_{m}-\\beta\\sigma_{b}}{1-\\beta}"
str.replace.by.blocks(str,"\\frac{_SUB_}{_SUB_}","(_SUB1_)/(_SUB2_)",
block.start = "{", block.end = "}")
source('C:/libraries/stringtools/stringtools/R/stringtools.R')
restore.point("convert.math")
res = list()
# Merge all lines together to one string
str = str.trim(merge.lines(str))
if (do.subst) {
str = do.subst(str,lyma)
}
if (str=="") {
warning("convert.math called with empty string")
return(str)
}
# Remove trash
str = str.replace(str,"&","") # Delimeters for equarray
str = str.replace(str,"\\\\","")
str = str.replace(str,"\\left","")
str = str.replace(str,"\\right","")
#str = str.replace(str," ","")
str = str.replace(str,"\\[","")
str = str.replace(str,"\\]","")
str = str.replace(str,"$","")
# Find fractions \frac{numerator}{denominator}
STR
str
str ="-\\frac{\\sigma_{m}-\\beta\\sigma_{b}}{\\beta-1}=\\frac{\\sigma_{m}-\\beta\\sigma_{b}}{1-\\beta}"
str.replace.by.blocks(str,"\\frac{_SUB_}{_SUB_}","(_SUB1_)/(_SUB2_)",
block.start = "{", block.end = "}")
str ="\\frac{1}{2}=\\frac{3}{4}"
str.replace.by.blocks(str,"\\frac{_SUB_}{_SUB_}","(_SUB1_)/(_SUB2_)",
block.start = "{", block.end = "}")
restore.point("str.replace.by.level")
library(data.table)
if (is.null(blocks))
blocks = str.blocks.pos(str, start=block.start, end=block.end, ignore=block.ignore, fixed=fixed)
if (length(blocks$levels)==0) {
blocks = blocks.add.level.0(blocks,str)
} else if ( blocks$levels[1]!=0) {
blocks = blocks.add.level.0(blocks,str)
}
show.blocks(blocks,str)
levels = blocks$levels
if (is.null(use.levels))
use.levels = unique(levels)
sub.pattern = paste0("_",sub.txt,"_")
# Splitt pattern in different parts before and after ignore
pattern.plains = str.at.pos(pattern,
pos.complement(str_locate_all(pattern,sub.pattern)[[1]], str=pattern))
pattern.number.mountains = str.number.matches(pattern,sub.pattern,fixed=TRUE)
level = 0
old.str = str
old.blocks = blocks
use.levels
level = 0
#message("level = ", level)
island.rows = which(levels==level)
ret =lapply(island.rows,replace.island,str=str,blocks=blocks, pattern.plains=pattern.plains, level=level,pattern.number.mountains=pattern.number.mountains,replacement=replacement,fixed=fixed,sub.txt=sub.txt)
ret
island.rows
show.blocks(blocks)
show.blocks(blocks,str)
restore.point("replace.island")
left = blocks$inner[island.row,1]
right = blocks$inner[island.row,2]
island.str = substring(str,left,right)
mountains= blocks$inner[
which(blocks$levels == level+1
& blocks$inner[,1]>=left
& blocks$inner[,2]<=right),,drop=FALSE]
plains = pos.complement(mountains, start=left, end=right)
show.blocks(blocks,str)
island.row
show.pos(cbind(left,right),str)
show.pos(mountains,str)
show.pos(plains,str)
plains.str = str.at.pos(str,plains)
plains.str
# Pattern has no mountains, i.e. we simply ignore the mountains in the replacement
if (length(pattern.plains)==1) {
ignore.pos = cbind(mountains-left+1)
new.island.str = str.replace(island.str, pattern.plains,ignore.pos = ignore.pos,fixed=fixed)
return(list(replaced= new.island.str!=island.str,new.island.str,island.str))
}
# Starting plain: must match at end
i = 1
first.pos = str.locate.at.end(plains.str,pattern.plains[i],fixed=fixed)
matches = !is.na(first.pos[,1])
if (sum(matches)==0)
return(list(replaced=FALSE,new=island.str,old=island.str))
# Center plains,must match completely
if (length(pattern.plains)>2) {
for (i in 2:(length(pattern.plains)-1)) {
new.matches = str.matches.pattern(plains.str[-(1:(i-1))], pattern.plains[i],fixed=fixed)
matches = matches & c(new.matches,rep(FALSE,i-1))
}
}
# The last plain must match at the start
i = length(pattern.plains)
# Starting plain: must match at end
last.pos = str.locate.at.start(plains.str,pattern.plains[i],fixed=fixed)
matches = matches & c(!is.na(last.pos[,1])[-(1:(i-1))], rep(FALSE,i-1))
if (sum(matches)==0)
return(list(replaced=FALSE,new=island.str,old=island.str))
# We have found matches to be replaced
start.with.mountain = plains[1,1]>mountains[1,1]
mountains.str = str.at.pos(str,mountains)
nm = pattern.number.mountains
np =length(pattern.plains)
matches
source('C:/libraries/stringtools/stringtools/R/stringtools.R')
source('C:/libraries/stringtools/stringtools/R/stringtools.R')
source('C:/libraries/stringtools/stringtools/R/stringtools.R')
source('C:/libraries/stringtools/stringtools/R/stringtools.R')
str ="\\frac{1}{2}=\\frac{3}{4}"
str.replace.by.blocks(str,"\\frac{_SUB_}{_SUB_}","(_SUB1_)/(_SUB2_)",
block.start = "{", block.end = "}")
str ="\\frac{1}{2}=\\frac{3}{4}"
str.replace.by.blocks(str,"\\frac{_SUB_}{_SUB_}","(_SUB1_)/(_SUB2_)",
block.start = "{", block.end = "}")
source('C:/libraries/stringtools/stringtools/R/stringtools.R')
